
R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(caret)
Loading required package: ggplot2
Loading required package: lattice
> 
> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.0.0 ──
✔ broom        1.0.1          ✔ rsample      1.1.0     
✔ dials        1.1.0          ✔ tibble       3.1.8     
✔ dplyr        1.0.10         ✔ tidyr        1.2.1     
✔ infer        1.0.3          ✔ tune         1.0.1.9001
✔ modeldata    1.0.1          ✔ workflows    1.1.2     
✔ parsnip      1.0.3          ✔ workflowsets 1.0.0     
✔ purrr        0.3.5          ✔ yardstick    1.1.0.9000
✔ recipes      1.0.3          
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ purrr::discard()         masks scales::discard()
✖ dplyr::filter()          masks stats::filter()
✖ dplyr::lag()             masks stats::lag()
✖ purrr::lift()            masks caret::lift()
✖ yardstick::precision()   masks caret::precision()
✖ yardstick::recall()      masks caret::recall()
✖ yardstick::sensitivity() masks caret::sensitivity()
✖ yardstick::specificity() masks caret::specificity()
✖ recipes::step()          masks stats::step()
• Use tidymodels_prefer() to resolve common conflicts.
> library(rules)

Attaching package: ‘rules’

The following object is masked from ‘package:dials’:

    max_rules

> library(baguette)
> library(discrim)

Attaching package: ‘discrim’

The following object is masked from ‘package:dials’:

    smoothness

> library(bonsai)
> library(plsmod)
> library(butcher)
> library(rlang)

Attaching package: ‘rlang’

The following objects are masked from ‘package:purrr’:

    %@%, as_function, flatten, flatten_chr, flatten_dbl, flatten_int,
    flatten_lgl, flatten_raw, invoke, splice

> 
> tidymodels_prefer()
> 
> # ------------------------------------------------------------------------------
> 
> data(ames)
> ames$Sale_Price <- log10(ames$Sale_Price)
> ames <-
+   ames %>%
+   mutate(Sale_Price <- log10(Sale_Price)) %>%
+   slice(1:100) %>%
+   select(Sale_Price, Neighborhood, Longitude, Latitude)
> 
> data("penguins")
> penguins <- penguins[complete.cases(penguins),]
> 
> set.seed(1)
> cls_dat <- sim_classification(50)
> reg_dat <- sim_regression(50)
> 
> # ------------------------------------------------------------------------------
> 
> two_class_rec <-
+   recipe(class ~ ., data = cls_dat) %>%
+   step_normalize(all_predictors())
> 
> # ------------------------------------------------------------------------------
> 
> knn_mod <-
+   nearest_neighbor(neighbors = 5) %>%
+   set_mode("classification") %>%
+   fit(class ~ ., data = cls_dat) %>%
+   butcher()
> 
> # ------------------------------------------------------------------------------
> 
> glmn_mod <-
+   workflow() %>%
+   add_model(logistic_reg(penalty = 0.1) %>% set_engine("glmnet")) %>%
+   add_recipe(two_class_rec) %>%
+   fit(data = cls_dat) %>%
+   butcher()
> 
> glmnet_0.1 <- coef(glmn_mod %>% extract_fit_engine(), s = 0.1)
> exp_param_glmnet_0.1 <- sum(glmnet_0.1[,1] != 0)
> exp_act_feat_glmnet_0.1 <- sum(glmnet_0.1[-1,1] != 0)
> 
> glmnet_0.01 <- coef(glmn_mod %>% extract_fit_engine(), s = 0.01)
> exp_param_glmnet_0.01 <- sum(glmnet_0.01[,1] != 0)
> exp_act_feat_glmnet_0.01 <- sum(glmnet_0.01[-1,1] != 0)
> 
> glmn_mtn_mod <-
+   multinom_reg(penalty = 0.1) %>% set_engine("glmnet") %>%
+   fit(species ~ ., data = penguins) %>%
+   butcher()
> 
> glmnet_mtn_0.1 <- coef(glmn_mtn_mod %>% extract_fit_engine(), s = 0.1)
> exp_param_glmnet_mtn_0.1 <- sum(map_int(glmnet_mtn_0.1, ~ sum(.x[,1] != 0)))
> exp_act_feat_glmnet_mtn_0.1 <- sum(map_int(glmnet_mtn_0.1, ~ sum(.x[-1,1] != 0)))
> 
> glmnet_mtn_0.01 <- coef(glmn_mtn_mod %>% extract_fit_engine(), s = 0.01)
> exp_param_glmnet_mtn_0.01 <- sum(map_int(glmnet_mtn_0.01, ~ sum(.x[,1] != 0)))
> exp_act_feat_glmnet_mtn_0.01 <- sum(map_int(glmnet_mtn_0.01, ~ sum(.x[-1,1] != 0)))
> 
> # ------------------------------------------------------------------------------
> 
> rpart_mod <-
+   decision_tree() %>%
+   set_mode("classification") %>%
+   set_engine("rpart", control = rpart::rpart.control(maxcompete = 0, maxsurrogate = 0)) %>%
+   fit(class ~ ., data = cls_dat) %>%
+   butcher()
> 
> # ------------------------------------------------------------------------------
> 
> c5_mod <-
+   decision_tree() %>%
+   set_mode("classification") %>%
+   set_engine("C5.0") %>%
+   fit(class ~ ., data = cls_dat)
> 
> exp_act_feat_c5 <- sum(C50::C5imp(c5_mod$fit, metric = "splits")$Overall > 0)
> 
> # TODO add for different # trees
> 
> # ------------------------------------------------------------------------------
> 
> c5_rules_mod <-
+   decision_tree() %>%
+   set_mode("classification") %>%
+   set_engine("C5.0", rules = TRUE) %>%
+   fit(class ~ ., data = cls_dat)
> 
> exp_act_feat_c5_rules <- sum(C50::C5imp(c5_rules_mod$fit, metric = "splits")$Overall > 0)
> # TODO add for different # trees
> 
> # ------------------------------------------------------------------------------
> 
> c5_boost_mod <-
+   boost_tree() %>%
+   set_mode("classification") %>%
+   set_engine("C5.0") %>%
+   fit(class ~ ., data = cls_dat)
> 
> exp_act_feat_c5_boost <- sum(C50::C5imp(c5_boost_mod$fit, metric = "splits")$Overall > 0)
> 
> # ------------------------------------------------------------------------------
> 
> xgb_mod <-
+   boost_tree() %>%
+   set_mode("classification") %>%
+   fit(class ~ ., data = cls_dat) %>%
+   butcher()
> 
> exp_act_feat_xgb <- row(xgboost::xgb.importance(model = xgb_mod$fit))
> exp_act_feat_xgb_3 <- row(xgboost::xgb.importance(model = xgb_mod$fit, trees = 0:3))
> exp_act_feat_xgb_9 <- row(xgboost::xgb.importance(model = xgb_mod$fit, trees = 0:9))
> 
> # ------------------------------------------------------------------------------
> 
> svm_mod <-
+   svm_rbf() %>%
+   set_mode("classification") %>%
+   fit(class ~ ., data = cls_dat) %>%
+   butcher()
> 
> # ------------------------------------------------------------------------------
> 
> # TODO add a brulee model
> 
> nnet_mod <-
+   mlp() %>%
+   set_mode("classification") %>%
+   fit(class ~ ., data = cls_dat) %>%
+   butcher()
> 
> exp_param_nnet <- length(coef(nnet_mod$fit))
> 
> mtn_mod <-
+   multinom_reg() %>%
+   fit(species ~ ., data = penguins) %>%
+   butcher()
> 
> exp_param_mtn <- length(coef(mtn_mod$fit))
> 
> # ------------------------------------------------------------------------------
> 
> xrf_mod <-
+   rule_fit(trees = 10, penalty = 0.1, learn_rate = .1) %>%
+   set_mode("classification") %>%
+   fit(class ~ ., data = cls_dat) %>%
+   butcher()
> 
> # TODO I don't think that they tidy method is working correctly
> xrf_tidy_0.1 <-
+   tidy(xrf_mod, penalty = 0.1) %>%
+   mutate(
+     rule_expr = map(rule, ~ rlang::parse_expr(.x)),
+     num_pred = map_int(rule_expr, ~ length(all.vars(.x)))
+   )
> is_rule_0.1 <- grepl("^r[0-9]", xrf_tidy_0.1$rule_id)
> exp_rules_xrf_0.1 <- sum(is_rule_0.1)
> exp_rule_size_xrf_0.1 <- mean(xrf_tidy_0.1$num_pred[is_rule_0.1])
> 
> xrf_tidy_0.001 <-
+   tidy(xrf_mod, penalty = 0.001) %>%
+   mutate(
+     rule_expr = map(rule, ~ rlang::parse_expr(.x)),
+     num_pred = map_int(rule_expr, ~ length(all.vars(.x)))
+   )
> is_rule_0.001 <- grepl("^r[0-9]", xrf_tidy_0.001$rule_id)
> exp_rules_xrf_0.001 <- sum(is_rule_0.001)
> exp_rule_size_xrf_0.001 <- mean(xrf_tidy_0.001$num_pred[is_rule_0.001])
> 
> 
> # ------------------------------------------------------------------------------
> 
> ranger_mod <-
+   rand_forest(trees = 3) %>%
+   set_mode("classification") %>%
+   set_engine("ranger", importance = 'impurity') %>%
+   fit(class ~ ., data = cls_dat) %>%
+   butcher()
> 
> # ------------------------------------------------------------------------------
> 
> cubist_mod <-
+   cubist_rules(committees = 2) %>%
+   fit(Sale_Price ~ ., data = ames) %>%
+   butcher()
> 
> cb_tidy_2 <-
+   cubist_mod %>%
+   tidy() %>%
+   mutate(
+     rule_expr = map(rule, rlang::parse_expr),
+     num_pred = map_int(rule_expr, ~ length(all.vars(.x)))
+   )
> 
> exp_num_prm_cb_2 <-
+   cb_tidy_2 %>%
+   select(estimate) %>%
+   unnest(cols = estimate) %>%
+   nrow()
> exp_rule_size_cb_2 <- mean(cb_tidy_2$num_pred)
> exp_num_rules_cb_2 <- nrow(cb_tidy_2)
> 
> cb_tidy_1 <-
+   cubist_mod %>%
+   tidy() %>%
+   filter(committee == 1) %>%
+   mutate(
+     rule_expr = map(rule, rlang::parse_expr),
+     num_pred = map_int(rule_expr, ~ length(all.vars(.x)))
+   )
> 
> exp_num_prm_cb_1 <-
+   cb_tidy_1 %>%
+   select(estimate) %>%
+   unnest(cols = estimate) %>%
+   nrow()
> exp_rule_size_cb_1 <- mean(cb_tidy_1$num_pred)
> exp_num_rules_cb_1 <- nrow(cb_tidy_1)
> 
> # ------------------------------------------------------------------------------
> 
> earth_mod <-
+   mars() %>%
+   set_mode("regression") %>%
+   fit(outcome ~ ., data = reg_dat) %>%
+   butcher()
> 
> earth_cls_mod <-
+   mars() %>%
+   set_mode("classification") %>%
+   fit(class ~ ., data = cls_dat) %>%
+   butcher()
Warning messages:
1: glm.fit: algorithm did not converge 
2: glm.fit: fitted probabilities numerically 0 or 1 occurred 
3: the glm algorithm did not converge for response "class_2" 
> 
> exp_act_feat_earth_reg <- nrow(earth::evimp(earth_mod$fit))
> exp_act_feat_earth_cls <- nrow(earth::evimp(earth_cls_mod$fit))
> exp_num_prm_earth_reg <- length(coef(earth_mod$fit))
> exp_num_prm_earth_cls <- length(coef(earth_cls_mod$fit))
> 
> # ------------------------------------------------------------------------------
> 
> bart_mod <-
+   bart(trees = 5) %>%
+   set_mode("regression") %>%
+   fit(outcome ~ ., data = reg_dat) %>%
+   butcher()
> 
> # ------------------------------------------------------------------------------
> 
> bag_cart_mod <-
+   bag_tree() %>%
+   set_mode("classification") %>%
+   set_engine("rpart", times = 3L) %>%
+   fit(class ~ ., data = cls_dat) %>%
+   butcher()
> 
> bag_c5_mod <-
+   bag_tree() %>%
+   set_mode("classification") %>%
+   set_engine("C5.0", times = 3L) %>%
+   fit(class ~ ., data = cls_dat) %>%
+   butcher()
> 
> bag_mars_reg_mod <-
+   bag_mars() %>%
+   set_mode("regression") %>%
+   set_engine("earth", times = 3L) %>%
+   fit(outcome ~ ., data = reg_dat) %>%
+   butcher()
> 
> # ------------------------------------------------------------------------------
> 
> ctree_mod <-
+   decision_tree() %>%
+   set_mode("classification") %>%
+   set_engine("partykit") %>%
+   fit(class ~ ., data = cls_dat) %>%
+   butcher()
> 
> cforest_mod <-
+   rand_forest(trees = 5) %>%
+   set_mode("classification") %>%
+   set_engine("partykit") %>%
+   fit(class ~ ., data = cls_dat) %>%
+   butcher()
> 
> # ------------------------------------------------------------------------------
> # TODO add multivariate model?
> 
> pls_mod <-
+   parsnip::pls(num_comp = 3) %>%
+   set_mode("regression") %>%
+   fit(outcome ~ ., data = reg_dat) %>%
+   butcher()
> 
> plsda_mod <-
+   parsnip::pls(num_comp = 3) %>%
+   set_mode("classification") %>%
+   fit(class ~ ., data = cls_dat) %>%
+   butcher()
> 
> spls_mod <-
+   parsnip::pls(num_comp = 3, predictor_prop = 1 / 10) %>%
+   set_mode("regression") %>%
+   fit(outcome ~ ., data = reg_dat) %>%
+   butcher()
> 
> splsda_mod <-
+   parsnip::pls(num_comp = 3, predictor_prop = 1 / 10) %>%
+   set_mode("classification") %>%
+   fit(class ~ ., data = cls_dat) %>%
+   butcher()
> 
> # ------------------------------------------------------------------------------
> 
> mods <- ls(pattern = "(_mod)|(^exp_)")
> 
> save(
+   list = mods,
+   version = 2,
+   file = "tests/testthat/test_cases.RData",
+   compress = TRUE, compression_level = 9
+ )
> 
> # ------------------------------------------------------------------------------
> 
> sessioninfo::session_info()
─ Session info ───────────────────────────────────────────────────────────────
 setting  value
 version  R version 4.2.0 (2022-04-22)
 os       macOS Big Sur/Monterey 10.16
 system   x86_64, darwin17.0
 ui       X11
 language (EN)
 collate  en_US.UTF-8
 ctype    en_US.UTF-8
 tz       America/New_York
 date     2022-12-06
 pandoc   2.17.1.1 @ /usr/local/bin/pandoc

─ Packages ───────────────────────────────────────────────────────────────────
 package       * version    date (UTC) lib source
 assertthat      0.2.1      2019-03-21 [1] CRAN (R 4.2.0)
 backports       1.4.1      2021-12-13 [1] CRAN (R 4.2.0)
 baguette      * 1.0.0      2022-06-17 [1] CRAN (R 4.2.0)
 BiocParallel    1.30.4     2022-10-13 [1] Bioconductor
 bonsai        * 0.2.0.9000 2022-09-21 [1] Github (tidymodels/bonsai@035a0af)
 broom         * 1.0.1      2022-08-29 [1] CRAN (R 4.2.0)
 butcher       * 0.3.0.9000 2022-09-21 [1] Github (tidymodels/butcher@c472231)
 C50             0.1.7      2022-11-09 [1] local
 cachem          1.0.6      2021-08-19 [1] CRAN (R 4.2.0)
 caret         * 6.0-91     2022-03-11 [1] CRAN (R 4.2.0)
 class           7.3-20     2022-01-13 [1] CRAN (R 4.2.0)
 cli             3.4.1      2022-09-23 [1] CRAN (R 4.2.0)
 codetools       0.2-18     2020-11-04 [1] CRAN (R 4.2.0)
 colorspace      2.0-3      2022-02-21 [1] CRAN (R 4.2.0)
 conflicted      1.1.0      2021-11-26 [1] CRAN (R 4.2.0)
 corpcor         1.6.10     2021-09-16 [1] CRAN (R 4.2.0)
 Cubist          0.4.0      2022-02-05 [1] CRAN (R 4.2.0)
 data.table      1.14.4     2022-10-17 [1] CRAN (R 4.2.0)
 dbarts          0.9-22     2022-03-29 [1] CRAN (R 4.2.0)
 DBI             1.1.3      2022-06-18 [1] CRAN (R 4.2.0)
 dials         * 1.1.0      2022-11-04 [1] CRAN (R 4.2.0)
 DiceDesign      1.9        2021-02-13 [1] CRAN (R 4.2.0)
 digest          0.6.30     2022-10-18 [1] CRAN (R 4.2.0)
 discrim       * 1.0.0.9000 2022-08-16 [1] Github (tidymodels/discrim@6060ce1)
 dplyr         * 1.0.10     2022-09-01 [1] CRAN (R 4.2.0)
 earth           5.3.1      2021-07-20 [1] CRAN (R 4.2.0)
 ellipse         0.4.3      2022-05-31 [1] CRAN (R 4.2.0)
 ellipsis        0.3.2      2021-04-29 [1] CRAN (R 4.2.0)
 fansi           1.0.3      2022-03-24 [1] CRAN (R 4.2.0)
 fastmap         1.1.0      2021-01-25 [1] CRAN (R 4.2.0)
 foreach         1.5.2      2022-02-02 [1] CRAN (R 4.2.0)
 Formula         1.2-4      2020-10-16 [1] CRAN (R 4.2.0)
 furrr           0.3.1      2022-08-15 [1] CRAN (R 4.2.0)
 future          1.29.0     2022-11-06 [1] CRAN (R 4.2.0)
 future.apply    1.10.0     2022-11-05 [1] CRAN (R 4.2.0)
 fuzzyjoin       0.1.6      2020-05-15 [1] CRAN (R 4.2.0)
 generics        0.1.3      2022-07-05 [1] CRAN (R 4.2.0)
 ggplot2       * 3.4.0      2022-11-04 [1] CRAN (R 4.2.0)
 ggrepel         0.9.1      2021-01-15 [1] CRAN (R 4.2.0)
 glmnet          4.1-4      2022-04-15 [1] CRAN (R 4.2.0)
 globals         0.16.1     2022-08-28 [1] CRAN (R 4.2.0)
 glue            1.6.2      2022-02-24 [1] CRAN (R 4.2.0)
 gower           1.0.0      2022-02-03 [1] CRAN (R 4.2.0)
 GPfit           1.0-8      2019-02-08 [1] CRAN (R 4.2.0)
 gridExtra       2.3        2017-09-09 [1] CRAN (R 4.2.0)
 gtable          0.3.1      2022-09-01 [1] CRAN (R 4.2.0)
 hardhat         1.2.0.9000 2022-11-30 [1] Github (tidymodels/hardhat@c2c896c)
 igraph          1.3.5      2022-09-22 [1] CRAN (R 4.2.0)
 infer         * 1.0.3      2022-08-22 [1] CRAN (R 4.2.0)
 inum            1.0-4      2021-04-12 [1] CRAN (R 4.2.0)
 ipred           0.9-13     2022-06-02 [1] CRAN (R 4.2.0)
 iterators       1.0.14     2022-02-05 [1] CRAN (R 4.2.0)
 jsonlite        1.8.3      2022-10-21 [1] CRAN (R 4.2.0)
 kernlab         0.9-31     2022-06-09 [1] CRAN (R 4.2.0)
 kknn            1.3.1      2016-03-26 [1] CRAN (R 4.2.0)
 lattice       * 0.20-45    2021-09-22 [1] CRAN (R 4.2.0)
 lava            1.7.0      2022-10-25 [1] CRAN (R 4.2.0)
 lhs             1.1.5      2022-03-22 [1] CRAN (R 4.2.0)
 libcoin         1.0-9      2021-09-27 [1] CRAN (R 4.2.0)
 lifecycle       1.0.3      2022-10-07 [1] CRAN (R 4.2.0)
 listenv         0.8.0      2019-12-05 [1] CRAN (R 4.2.0)
 lubridate       1.9.0      2022-11-06 [1] CRAN (R 4.2.0)
 magrittr        2.0.3      2022-03-30 [1] CRAN (R 4.2.0)
 MASS            7.3-58.1   2022-08-03 [1] CRAN (R 4.2.0)
 Matrix          1.5-3      2022-11-11 [1] CRAN (R 4.2.0)
 matrixStats     0.62.0     2022-04-19 [1] CRAN (R 4.2.0)
 memoise         2.0.1      2021-11-26 [1] CRAN (R 4.2.0)
 mixOmics        6.20.0     2022-08-16 [1] bioc_git2r (@dd98c6e)
 modeldata     * 1.0.1      2022-09-06 [1] CRAN (R 4.2.0)
 ModelMetrics    1.2.2.2    2020-03-17 [1] CRAN (R 4.2.0)
 munsell         0.5.0      2018-06-12 [1] CRAN (R 4.2.0)
 mvtnorm         1.1-3      2021-10-08 [1] CRAN (R 4.2.0)
 nlme            3.1-160    2022-10-10 [1] CRAN (R 4.2.0)
 nnet            7.3-18     2022-09-28 [1] CRAN (R 4.2.0)
 parallelly      1.32.1     2022-07-21 [1] CRAN (R 4.2.0)
 parsnip       * 1.0.3      2022-11-11 [1] CRAN (R 4.2.0)
 partykit        1.2-16     2022-06-20 [1] CRAN (R 4.2.0)
 pillar          1.8.1      2022-08-19 [1] CRAN (R 4.2.0)
 pkgconfig       2.0.3      2019-09-22 [1] CRAN (R 4.2.0)
 plotmo          3.6.2      2022-05-21 [1] CRAN (R 4.2.0)
 plotrix         3.8-2      2021-09-08 [1] CRAN (R 4.2.0)
 plsmod        * 1.0.0.9000 2022-09-21 [1] Github (tidymodels/plsmod@1127497)
 plyr            1.8.7      2022-03-24 [1] CRAN (R 4.2.0)
 pROC            1.18.0     2021-09-03 [1] CRAN (R 4.2.0)
 prodlim         2019.11.13 2019-11-17 [1] CRAN (R 4.2.0)
 purrr         * 0.3.5      2022-10-06 [1] CRAN (R 4.2.0)
 R6              2.5.1      2021-08-19 [1] CRAN (R 4.2.0)
 ranger          0.14.1     2022-06-18 [1] CRAN (R 4.2.0)
 rARPACK         0.11-0     2016-03-10 [1] CRAN (R 4.2.0)
 RColorBrewer    1.1-3      2022-04-03 [1] CRAN (R 4.2.0)
 Rcpp            1.0.9      2022-07-08 [1] CRAN (R 4.2.0)
 recipes       * 1.0.3      2022-11-09 [1] CRAN (R 4.2.0)
 reshape2        1.4.4      2020-04-09 [1] CRAN (R 4.2.0)
 rlang         * 1.0.6      2022-09-24 [1] CRAN (R 4.2.0)
 rpart           4.1.19     2022-10-21 [1] CRAN (R 4.2.0)
 rsample       * 1.1.0      2022-08-08 [1] CRAN (R 4.2.0)
 RSpectra        0.16-1     2022-04-24 [1] CRAN (R 4.2.0)
 rstudioapi      0.14       2022-08-22 [1] CRAN (R 4.2.0)
 rules         * 1.0.0.9000 2022-09-21 [1] Github (tidymodels/rules@48dd5bf)
 scales        * 1.2.1      2022-08-20 [1] CRAN (R 4.2.0)
 sessioninfo     1.2.2.9000 2022-10-11 [1] Github (r-lib/sessioninfo@d70760d)
 shape           1.4.6      2021-05-19 [1] CRAN (R 4.2.0)
 stringi         1.7.8      2022-07-11 [1] CRAN (R 4.2.0)
 stringr         1.4.1      2022-08-20 [1] CRAN (R 4.2.0)
 survival        3.4-0      2022-08-09 [1] CRAN (R 4.2.0)
 TeachingDemos   2.12       2020-04-07 [1] CRAN (R 4.2.0)
 tibble        * 3.1.8      2022-07-22 [1] CRAN (R 4.2.0)
 tidymodels    * 1.0.0      2022-07-13 [1] CRAN (R 4.2.0)
 tidyr         * 1.2.1      2022-09-08 [1] CRAN (R 4.2.0)
 tidyselect      1.2.0      2022-10-10 [1] CRAN (R 4.2.0)
 timechange      0.1.1      2022-11-04 [1] CRAN (R 4.2.0)
 timeDate        4021.106   2022-09-30 [1] CRAN (R 4.2.0)
 tune          * 1.0.1.9001 2022-12-05 [1] Github (tidymodels/tune@e23abdf)
 utf8            1.2.2      2021-07-24 [1] CRAN (R 4.2.0)
 vctrs           0.5.1      2022-11-16 [1] CRAN (R 4.2.0)
 withr           2.5.0      2022-03-03 [1] CRAN (R 4.2.0)
 workflows     * 1.1.2      2022-11-16 [1] CRAN (R 4.2.0)
 workflowsets  * 1.0.0      2022-07-12 [1] CRAN (R 4.2.0)
 xgboost         1.6.0.1    2022-04-16 [1] CRAN (R 4.2.0)
 xrf             0.2.2      2022-10-04 [1] CRAN (R 4.2.0)
 yardstick     * 1.1.0.9000 2022-11-30 [1] Github (tidymodels/yardstick@5f1b9ce)

 [1] /Library/Frameworks/R.framework/Versions/4.2/Resources/library

──────────────────────────────────────────────────────────────────────────────
> 
> q("no")
> proc.time()
   user  system elapsed 
 15.898   0.507  16.424 
